-- 1. 영어학문학과(학과코드 002) 학생들의 학번과 이름, 입학 년도를 입학 년도가
-- 빠른 순으로 표시하는 SQL 문장 작성.
-- (단, 헤더는 "학번", "이름", "입학년도" 표시)
SELECT * FROM TB_STUDENT;

SELECT STUDENT_NO "학번", STUDENT_NAME "이름", ENTRANCE_DATE "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY ENTRANCE_DATE;

-- 2. 춘 기술대학교의 교수 중 이름이 세 글자가 아닌 교수가 한 명 있다.
-- 그 교수의 이름과 주민번호를 화면에 출력.
SELECT * FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) != 3;

-- 3. 춘 기술대학교 남자 교수들의 이름과 나이를 출력.
-- 단, 이때 나이가 적은 사람에서 많은 순서로 화면에 출력.
-- 교수 중 2000년 이후 출생자는 없으며 출력 헤더를 "교수이름", "나이", 나이 계산은 '만'으로 계산.
SELECT * FROM TB_PROFESSOR;

SELECT '19'||SUBSTR(PROFESSOR_SSN, 1, 2) FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1) = '1';
SELECT TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'YYYY') FROM TB_PROFESSOR;
SELECT TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'YYYY') FROM TB_PROFESSOR;

SELECT TO_NUMBER(SUBSTR(SYSDATE, 1, 4), 'YYYY') FROM DUAL;

SELECT PROFESSOR_NAME, TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'RRMMDD'))/12) "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN, 8, 1) = '1'
ORDER BY "나이";

SELECT MIN(PROFESSOR_SSN) FROM TB_PROFESSOR;

SELECT PROFESSOR_NAME "교수 이름", 
TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'RRMMDD'))/12) "나이"
FROM TB_PROFESSOR MAIN
WHERE TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'RRMMDD'))/12)
 = (SELECT MIN(TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(PROFESSOR_SSN, 1, 6), 'RRMMDD'))/12))
	FROM TB_PROFESSOR SUB
	WHERE SUB.PROFESSOR_SSN = MAIN.PROFESSOR_SSN)
AND SUBSTR(PROFESSOR_SSN, 8, 1) = '1'
ORDER BY "나이";

-- 4. 교수들의 이름 중 성을 제외한 이름만 출력하는 SQL 문장을 작성.
-- 출력 헤더는 "이름"으로 출력.
SELECT * FROM TB_PROFESSOR;
SELECT PROFESSOR_NAME FROM TB_PROFESSOR;

SELECT SUBSTR(PROFESSOR_NAME, 2, 4) "이름" FROM TB_PROFESSOR;

-- 5. 춘 기술대학의 재수생 입학자를 구하려고 한다. 이때, 19살에 입학하면 재수를 하지 않은 것으로 간주.
SELECT * FROM TB_STUDENT;
SELECT TO_DATE(SUBSTR(STUDENT_SSN, 1, 6)) FROM TB_STUDENT;
SELECT ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6)) FROM TB_STUDENT;
SELECT STUDENT_NAME, TRUNC(MONTHS_BETWEEN(ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6)))/12 + 1) "입학 나이" FROM TB_STUDENT;
SELECT DISTINCT STUDENT_NO, STUDENT_NAME FROM TB_STUDENT
WHERE MONTHS_BETWEEN(ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6), 'RRMMDD'))/12 > 19
AND MONTHS_BETWEEN(ENTRANCE_DATE, TO_DATE(SUBSTR(STUDENT_SSN, 1, 6), 'RRMMDD'))/12 <= 20;

-- 6. 2020년 크리스마스는 무슨 요일인가?
SELECT TO_CHAR(TO_DATE('20201225', 'YYYYMMDD'), 'dy') FROM DUAL;

-- 7. TO_DATE('99/10/11', 'YY/MM/DD'), TO_DATE('49/10/11', 'YY,MM,DD')은
-- 각각 몇 년 몇월 몇일을 의미할까? 또 TO_DATE('99/10/11', 'RR/MM/DD'),
-- TO_DATE('49/10/11', 'RR/MM/DD') 은 각각 몇 년 몇월 몇일을 의미할까?
SELECT TO_CHAR(TO_DATE('99/10/11', 'YY/MM/DD'), 'YYYY/MM/DD') "첫 번째" , TO_CHAR(TO_DATE('49/10/11', 'YY/MM/DD'), 'YYYY/MM/DD') "두 번째",
TO_CHAR(TO_DATE('99/10/11', 'RR/MM/DD'), 'YYYY/MM/DD') "세 번째", TO_CHAR(TO_DATE('49/10/11', 'RR/MM/DD'), 'YYYY/MM/DD') "네 번째"
FROM DUAL;

-- 8. 춘 기술대학의 2000년도 이후 입학자들은 학번이 A로 시작한다.
-- 2000년도 이전 학번을 받은 학생들의 학번과 이름을 조회.
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO NOT LIKE 'A%';

-- 9. 학번이 A517178 인 한아름 학생의 학점 총 평점을 구하기.
-- 단, 이때 헤더는 "평점"으로 출력하고 점수는 반올림하여 소수점 이하 한 자리까지 표시.
SELECT ROUND(AVG(POINT), 1) 평점
FROM TB_STUDENT ts
JOIN TB_GRADE tg ON (ts.STUDENT_NO = tg.STUDENT_NO)
WHERE ts.STUDENT_NO = 'A517178';

SELECT * FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

-- 10. 학과별 학생수를 구해 "학과번호", "학생수(명)" 의 형태로 헤더를 만들어 결과값 출력.
SELECT * FROM TB_CLASS;
SELECT * FROM TB_STUDENT;

SELECT DEPARTMENT_NO "학과 번호", COUNT(*) "학생 수(명)"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

-- 11. 지도 교수를 배정 받지 못한 학생의 수는 몇 명인가?
SELECT COUNT(*)
FROM TB_STUDENT
GROUP BY COACH_PROFESSOR_NO
HAVING COACH_PROFESSOR_NO IS NULL;

-- 12. 학번이 A112113인 김고운 학생의 년도 별 평점을 구하기
-- 단, 출력 화면 헤더는 "년도", "년도 별 평점"으로 출력하고 점수는 반올림하고 소수점 이하 한 자리까지 표시.

SELECT * FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

SELECT SUBSTR(TERM_NO, 1, 4) "년도", ROUND(AVG(POINT), 1) "년도 별 평점"
FROM TB_STUDENT ts
JOIN TB_GRADE tg  ON(ts.STUDENT_NO = tg.STUDENT_NO)
WHERE ts.STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO, 1, 4)
--HAVING ts.STUDENT_NO = 'A112113'
ORDER BY 1;

-- 13. 학과 별 휴학생 수를 파악. 학과 번호와 휴학생 수를 표시.
SELECT * FROM TB_STUDENT ts;
SELECT * FROM TB_DEPARTMENT td;

SELECT MAIN.DEPARTMENT_NO "학과 코드명", COUNT(*) "휴학생 수"
FROM TB_DEPARTMENT MAIN
LEFT JOIN TB_STUDENT SUB ON (MAIN.DEPARTMENT_NO = SUB.DEPARTMENT_NO)
WHERE ABSENCE_YN = 'Y'
GROUP BY MAIN.DEPARTMENT_NO
ORDER BY MAIN.DEPARTMENT_NO;

SELECT MAIN.DEPARTMENT_NO "학과 코드명", SUM(DECODE(ABSENCE_YN, 'Y', 1, 0)) "휴학생 수"
FROM TB_DEPARTMENT MAIN
LEFT JOIN TB_STUDENT SUB ON (MAIN.DEPARTMENT_NO = SUB.DEPARTMENT_NO)
GROUP BY MAIN.DEPARTMENT_NO
ORDER BY MAIN.DEPARTMENT_NO;

-- 14. 춘 대학교에 다니는 동명이인 학생들의 이름을 조회
SELECT STUDENT_NAME, COUNT(*) 
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) > 1
ORDER BY STUDENT_NAME;

-- 15. 학번이 A112113 인 김고운 학생의 년도, 학기 별 평점과
-- 년도 별 누적 평점, 총 평점을 조회
SELECT * FROM TB_GRADE
WHERE STUDENT_NO = 'A112113';

SELECT NVL(SUBSTR(TERM_NO, 1, 4), ' ') 년도, NVL(SUBSTR(TERM_NO, 5, 2), ' ') 학기, ROUND(AVG(POINT), 1)  
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2))
ORDER BY SUBSTR(TERM_NO, 1, 4);

